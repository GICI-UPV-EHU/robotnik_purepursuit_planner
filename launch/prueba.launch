<?xml version="1.0"?>
<launch>

  <!-- Convert laser scan to 3D point cloud into fixed frame not rotating along with sensor.
       Also performs scan shadow point filtering -->
  <node pkg="hector_laserscan_to_pointcloud" type="laserscan_to_pointcloud_node" name="scan_to_ptcld" respawn="true">
    <!--remap from="/scan" to="/hokuyo_base/scan"/--> 
    <param name="min_range" value="0.05" />
    <param name="use_high_fidelity_projection" value="true" />
    <param name="target_frame" value="base_footprint" />
    <!-- The scan shadow filter removes laser readings that are most likely caused by the veiling effect 
	 when the edge of an object is being scanned -->
    <rosparam command="load" file="$(find hector_laserscan_to_pointcloud)/config/default_scan_shadow_filter.yaml" />
  </node>

  <include file="$(find summit_xl_control)/launch/summit_xl_control.launch" />
  
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find summit_xl_gazebo)/worlds/fake_tunnel.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="headless" value="false"/>
  </include>
  
  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
         command="$(find xacro)/xacro.py '$(find summit_xl_description)/robots/summit_xl.urdf.xacro'" />
         
  <!-- Call a python script to the run a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -model summit_xl -param robot_description -x -12"/>

  <!-- Rviz --> 
  <node pkg="rviz" type="rviz" name="rviz"/> 

</launch>
